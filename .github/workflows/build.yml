name: Build and Test

on:
  push:
    branches: main
  pull_request:
    branches: '*'

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  # Min and max limits of jupyterlite-core versions that this should work on.
  # Changes here should be synchronised with pyproject.toml dependencies section.
  MIN_LITE_VERSION: jupyterlite-core==0.6.0
  MAX_LITE_VERSION: --pre jupyterlite-core<0.8.0

  LAB_VERSION: jupyterlab>=4.0.0,<5

jobs:
  build:
    name: Build and upload wheel
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - name: Install dependencies
      run: python -m pip install -U ${LAB_VERSION}

    - name: Lint the extension
      run: |
        set -eux
        jlpm
        jlpm run lint:check

    - name: Test the extension
      run: |
        set -eux
        jlpm run test

    - name: Build the extension
      run: |
        set -eux
        python -m pip install .[test]

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "@jupyterlite/terminal.*OK"

    - name: List installed packages
      run: |
        python -m pip list

    - name: Package the extension
      run: |
        set -eux

        pip install build
        python -m build
        pip uninstall -y "jupyterlite_terminal" jupyterlab

    - name: Upload extension packages
      uses: actions/upload-artifact@v4
      with:
        name: extension-artifacts
        path: dist/jupyterlite_terminal*
        if-no-files-found: error

  test_isolated:
    name: Test isolated
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Install Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'
        architecture: 'x64'

    - uses: actions/download-artifact@v4
      with:
        name: extension-artifacts

    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)

        pip install ${LAB_VERSION} jupyterlite_terminal*.whl

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "@jupyterlite/terminal.*OK"

  integration-tests:
    name: Integration tests ${{ matrix.lite-version}}
    needs: build
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        lite-version: ['min', 'normal', 'max']

    env:
      PLAYWRIGHT_BROWSERS_PATH: ${{ github.workspace }}/pw-browsers

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - name: Download extension package
      uses: actions/download-artifact@v4
      with:
        name: extension-artifacts

    - name: Pre-install minimum jupyterlite-core
      if: ${{ matrix.lite-version == 'min' }}
      run: |
        python -m pip install ${MIN_LITE_VERSION}

    - name: Pre-install maximum jupyterlite-core
      if: ${{ matrix.lite-version == 'max' }}
      run: |
        python -m pip install ${MAX_LITE_VERSION}

    - name: Install the extension
      run: |
        set -eux
        python -m pip install jupyterlite_terminal*.whl ${LAB_VERSION}

    - name: List installed packages
      run: |
        python -m pip list

    - name: Micromamba needed for cockle_wasm_env
      uses: mamba-org/setup-micromamba@main

    - name: Install dependencies
      working-directory: ui-tests
      env:
        YARN_ENABLE_IMMUTABLE_INSTALLS: 0
        PLAYWRIGHT_SKIP_BROWSER_DOWNLOAD: 1
      run: |
        jlpm install
        jlpm build

    - name: Set up browser cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/pw-browsers
        key: ${{ runner.os }}-${{ hashFiles('ui-tests/yarn.lock') }}

    - name: Install browser
      run: jlpm playwright install chromium
      working-directory: ui-tests

    - name: Execute integration tests
      working-directory: ui-tests
      run: |
        jlpm test

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: jupyterlite_terminal-playwright-tests
        path: |
          ui-tests/test-results_${{ matrix.lite-version}}
          ui-tests/playwright-report_${{ matrix.lite-version}}

  check_links:
    name: Check Links
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4
      - uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1
      - uses: jupyterlab/maintainer-tools/.github/actions/check-links@v1
        with:
          ignore_glob: docs/*.md
